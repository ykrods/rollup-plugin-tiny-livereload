/**
 * rollup-plugin-tiny-livereload
 */
const http = require("http");


function createServer(port) {
  let subscribers = [];

  function clearSubscribers() {
    subscribers = subscribers.filter(s => !s.finished);
  }

  function reload() {
    clearSubscribers();

    for (const sub of subscribers) {
      sub.write("event: livereload\ndata: {}", "utf-8");
      sub.write("\n\n");
    }
  }

  const server = http.createServer(async (request, response) => {
    if (request.url !== "/watch") {
      response.writeHead(404, {
        "Content-Type": "text/plain",
        "Access-Control-Allow-Origin": "*",
      });
      response.end("Not Found", "utf-8");
      return;
    }

    response.writeHead(200, {
      Connection: "keep-alive",
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache",
      "Access-Control-Allow-Origin": "*",
    });
    response.socket.on("close", () => {
      response.end();
      clearSubscribers();
    });
    subscribers.push(response);

    response.write("event: connected\ndata: {}", "utf-8");
    response.write("\n\n");
  });

  server.on("error", (err) => {
    console.error(`[plugin-tiny-livereload] ${err}`);
    server.close();
  });

  server.listen(port);
  return [server, reload];
}

function generateReloadClient(port) {
  const url = `//localhost:${port}/watch`;
  const code = `
/* Live reload client generated by rollup-plugin-live-reload */
(() => {
  if (window._liveReload) {
    return;
  }

  const eventSource = new EventSource("${url}");

  eventSource.addEventListener("connected", (evt) => {
    console.log("[rollup-plugin-tiny-livereload] live reload enabled");
  });

  eventSource.addEventListener("livereload", (evt) => {
    eventSource.close();
    window.location.reload();
  });

  window._liveReload = { eventSource };
})();
`;
  return code;
}

function livereload(options = {}) {
  const port = options.port || 5001;

  let server = null;
  let reload = null;
  let injected = false;

  return {
    name: "tiny-livereload",
    buildStart() {
      injected = false;
      if (!server) {
        [server, reload] = createServer(port);
      }
    },
    transform(code, id) {
      if (injected) return;

      if (!server || !server.listening) return;

      injected = true;
      return {
        code: generateReloadClient(port) + code,
        map: null,
      };
    },
    writeBundle() {
      reload && reload();
    },
  }
}
module.exports = livereload;
